datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  TEACHER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model LocaleString {
  id          Int          @id @default(autoincrement())
  en          String
  ru          String
  uz          String
  teacherName TeacherName?
  teacherBio  TeacherBio?
  teacherRole TeacherRole?
}

model TeacherName {
  id        Int          @id @default(autoincrement())
  value     LocaleString @relation(fields: [valueId], references: [id])
  valueId   Int          @unique
  teacher   Teacher?
  teacherId String
}

model TeacherRole {
  id        Int          @id @default(autoincrement())
  value     LocaleString @relation(fields: [valueId], references: [id])
  valueId   Int          @unique
  teacher   Teacher?
  teacherId String
}

model TeacherBio {
  id        Int          @id @default(autoincrement())
  value     LocaleString @relation(fields: [valueId], references: [id])
  valueId   Int          @unique
  teacher   Teacher?
  teacherId String
}

model Teacher {
  id      String      @id @default(cuid())
  name    TeacherName @relation(fields: [nameId], references: [id], map: "teacherName_fk")
  nameId  Int         @unique
  role    TeacherRole @relation(fields: [roleId], references: [id], map: "teacherRole_fk")
  roleId  Int         @unique
  bio     TeacherBio  @relation(fields: [bioId], references: [id], map: "teacherBio_fk")
  bioId   Int         @unique
  image   String
  courses Course[]
}

model Course {
  id          String    @id @default(cuid())
  name        String
  description String
  image       String?
  teachers    Teacher[]
}
